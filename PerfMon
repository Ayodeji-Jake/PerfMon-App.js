const mongoose = require("mongoose");
const createError = require("http-errors");
const express = require("express");
const path = require("path");
const cookieParser = require("cookie-parser");
const logger = require("morgan");
const session = require("express-session");
const findOrCreate = require("mongoose-findorcreate");

const indexRouter = require("./routes/index");
const usersRouter = require("./routes/users");

const app = express();

// Connect to MongoDB database
mongoose
  .createConnection(
    "mongodb://jll-am-mongodb-perfmon-appsdev:wn6ZEbH0TN69BafkwetVkmreZIp2ld7lnIQcvU6Ll2fSjV4EBiobliJMbLByiQDiTNK8fWb9lIpsACDb1x70pA==@jll-am-mongodb-perfmon-appsdev.mongo.cosmos.azure.com:10255/?ssl=true&replicaSet=globaldb&retrywrites=false&maxIdleTimeMS=120000&appName=@jll-am-mongodb-perfmon-appsdev@",
    { useNewUrlParser: true }
  )
  .then(() => console.log("Connected to MongoDB"))
  .catch(error => console.error(`Failed to connect to MongoDB: ${error}`));

// view engine setup
app.set("views", path.join(__dirname, "views"));
app.set("view engine", "jade");

app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, "public")));
app.use(
  session({
    secret: "key",
    resave: false,
    saveUninitialized: false,
  })
);

app.use(logger("dev"));

app.use("/", indexRouter);
app.use("/login", usersRouter);

// Error handling
app.use((req, res, next) => {
  next(createError(404));
});

app.use((err, req, res, next) => {
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};
  res.status(err.status || 500);
  res.render('error');
});

module.exports = app;
